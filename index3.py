import sounddevice as sd
import numpy as np
import speech_recognition as sr
import os
import pygame
from pygame import mixer
import requests

# ‡πÄ‡∏£‡∏¥‡πà‡∏° mixer ‡∏Ç‡∏≠‡∏á pygame
pygame.init()
mixer.init()

r = sr.Recognizer()
API_URL = "http://localhost:5000/device"  # ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô Node.js

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
def record(duration=3, fs=16000):
    print(f"üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    audio = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16')
    sd.wait()
    audio = audio.flatten().tobytes()
    return sr.AudioData(audio, fs, 2) 

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
def exit_program():
    print("üëã ‡∏à‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    global running
    running = False

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå wav/mp3
def play_sound(file_name):
    sounds_dir = r"C:\Users\Nuntapon.p\Desktop\Smart-Home\sounds"
    file_path = os.path.join(sounds_dir, file_name)
    if not os.path.exists(file_path):
        print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö: {file_path}")
        return
    try:
        sound = mixer.Sound(file_path)
        sound.play()
    except Exception as e:
        print("‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
def call_api(device, action):
    try:
        res = requests.post(API_URL, json={"device": device, "action": action})
        if res.status_code == 200:
            print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {device} {action} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f"‚ùå API error: {res.status_code}")
    except Exception as e:
        print("‚ùå API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:", e)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° loop
running = True

# Dictionary ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞ API
commands = {
    "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü": lambda: (print("üí° ‡πÑ‡∏ü‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"), play_sound("on_light.wav"), call_api("light1", "on")),
    "‡∏õ‡∏¥‡∏î‡πÑ‡∏ü": lambda: (print("üí° ‡πÑ‡∏ü‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"), play_sound("off_light.wav"), call_api("light1", "off")),
    "‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏ß‡∏µ": lambda: (print("üì∫ ‡∏ó‡∏µ‡∏ß‡∏µ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"), play_sound("on_tv.wav"), call_api("tv", "on")),
    "‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏ß‡∏µ": lambda: (print("üì∫ ‡∏ó‡∏µ‡∏ß‡∏µ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"), play_sound("off_tv.wav"), call_api("tv", "off")),
    "‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏£‡πå": lambda: (print("‚ùÑÔ∏è ‡πÅ‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"), play_sound("on_air.wav"), call_api("air", "on")),
    "‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏£‡πå": lambda: (print("‚ùÑÔ∏è ‡πÅ‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"), play_sound("off_air.wav"), call_api("air", "off")),
    "‡∏≠‡∏≠‡∏Å": exit_program,
    "‡∏´‡∏¢‡∏∏‡∏î": exit_program,
}

# Loop ‡∏´‡∏•‡∏±‡∏Å
while running:
    choice = input("‡∏û‡∏¥‡∏°‡∏û‡πå 'k' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠ Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ").strip().lower()
    
    if choice == 'k':
        text = input("üìù ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ")
    else:
        audio_data = record(duration=3)
        try:
            text = r.recognize_google(audio_data, language="th-TH")
        except sr.UnknownValueError:
            print("‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
            continue
        except sr.RequestError as e:
            print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)
            continue
    
    print("‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ß‡πà‡∏≤:", text)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    found = False
    for key, action in commands.items():
        if key in text:
            action()
            found = True
            break
    if not found:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
