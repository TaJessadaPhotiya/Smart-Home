import json
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

DATA_FILE = "data.json"
MEMORY_FILE = "memory.json"

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        chatbot_data = json.load(f)
else:
    chatbot_data = []

# ‡πÇ‡∏´‡∏•‡∏î memory ‡πÄ‡∏Å‡πà‡∏≤
if os.path.exists(MEMORY_FILE):
    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        context_memory = json.load(f)
else:
    context_memory = []

def save_memory():
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(context_memory, f, ensure_ascii=False, indent=2)

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(chatbot_data, f, ensure_ascii=False, indent=2)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á TF-IDF Vectorizer
def get_vectorizer():
    questions = [item["user"] for item in chatbot_data]
    vectorizer = TfidfVectorizer()
    question_vectors = vectorizer.fit_transform(questions) if questions else None
    return vectorizer, question_vectors

def find_best_match(user_input):
    if not chatbot_data:
        return None
    
    vectorizer, question_vectors = get_vectorizer()
    user_vec = vectorizer.transform([user_input])
    similarities = cosine_similarity(user_vec, question_vectors)
    best_idx = similarities.argmax()
    if similarities[0, best_idx] < 0.3:  # ‡∏ñ‡πâ‡∏≤ similarity ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        return None
    return chatbot_data[best_idx]["bot"]

def chat_with_bot(user_input):
    context_memory.append({"user": user_input, "bot": None})
    
    # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å TF-IDF
    response = find_best_match(user_input)
    
    if not response:
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏π context ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        last_topic = None
        for prev in reversed(context_memory[:-1]):
            if "user" in prev:
                last_topic = prev["user"]
                break
        if last_topic:
            response = f"‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° '{user_input}' ‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á '{last_topic}' ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?"
        else:
            response = f"‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° '{user_input}' ‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à"

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á chatbot_data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        chatbot_data.append({"user": user_input, "bot": response})
        save_data()

    context_memory[-1]["bot"] = response
    save_memory()
    
    return response

# -------------------------
print("ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏•‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠ '‡∏≠‡∏≠‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö\n")

while True:
    user_input = input("üë§ ‡∏Ñ‡∏∏‡∏ì: ").strip()
    if user_input.lower() in ["‡∏≠‡∏≠‡∏Å", "exit", "quit"]:
        print("ü§ñ ‡∏ö‡∏≠‡∏ó: ‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ‚ù§Ô∏è")
        break
    elif user_input.lower() in ["‡∏•‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "forget"]:
        context_memory.clear()
        save_memory()
        print("ü§ñ ‡∏ö‡∏≠‡∏ó: ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ üß†‚ú®")
        continue

    reply = chat_with_bot(user_input)
    print("ü§ñ ‡∏ö‡∏≠‡∏ó:", reply)
